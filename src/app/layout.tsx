import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { jsonToConvex } from "convex/values";
import { ProfileQuery } from "@/components/convex/query.config";
import Providers from "@/components/providers";
import { logger } from "@/lib/logger";
import {
  type ConvexRawUser,
  normalizeProfile,
  type Profile,
} from "@/types/user";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const rawProfile = await ProfileQuery();
  let profile: Profile | null = null;
  if (rawProfile?._valueJSON) {
    try {
      const parsedJson = JSON.parse(rawProfile._valueJSON);
      const convexValue = jsonToConvex(parsedJson);
      profile = normalizeProfile(convexValue as ConvexRawUser);
    } catch (error) {
      logger.error({ error }, "Failed to parse or deserialize profile");
    }
  }

  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers profile={profile}>{children}</Providers>
      </body>
    </html>
  );
}
